{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Event","state","showHideDetails","handleShowHideButton","setState","className","this","props","summary","start","dateTime","location","href","htmlLink","description","onClick","Component","EventList","events","map","event","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","eventValue","handleEventInputChanged","htmlFor","name","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.90f66fac.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showHideDetails: false,\r\n  };\r\n\r\n  handleShowHideButton = () => {\r\n    if (this.state.showHideDetails === true) {\r\n      this.setState({ showHideDetails: false });\r\n    } else {\r\n      this.setState({ showHideDetails: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='eventSummary'>\r\n        <h1>{this.props.summary}</h1>\r\n        <p>{() => this.props.start.dateTime}</p>\r\n        <p className='locations'>{this.props.location}</p>\r\n\r\n        {this.state.showHideDetails && (\r\n          <div className='event-details'>\r\n            <h2>About event:</h2>\r\n            <a href={this.props.htmlLink}>See Details on Google Calendar</a>\r\n            <p>{this.props.description}</p>\r\n          </div>\r\n        )}\r\n\r\n        <button\r\n          className='detailsButton'\r\n          onClick={() => this.handleShowHideButton()}\r\n        >\r\n          {!this.state.showHideDetails ? 'show details' : 'hide-details'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    if (!this.props.events) {\r\n      return (<div className=\"EventList\"></div>)\r\n    };\r\n    \r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions\r\n    });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='CitySearch'>\r\n        <input\r\n          type='text'\r\n          className='city'\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n        <li key={suggestion}\r\n          onClick={() => this.handleItemClicked(suggestion)}\r\n          >{suggestion}</li>\r\n        ))}\r\n        <li key='all'>\r\n        <b>See all cities</b>\r\n        </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    eventValue: 32,\r\n  };\r\n\r\n  handleEventInputChanged = (event) => {\r\n    const eventValue = event.target.value;\r\n    this.setState({\r\n      eventValue,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='numberOfEvent'>\r\n        <label htmlFor='numberOfEvent'></label>\r\n        <input\r\n          type='number'\r\n          name='InputNumberOfEvent'\r\n          className='inputEvent'\r\n          placeholder='Enter Number of Events'\r\n          value={this.state.eventValue}\r\n          onChange={this.handleEventInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","/* import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; */\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <CitySearch />\r\n        <NumberOfEvents />\r\n        <EventList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorkerRegistration.register();\nreportWebVitals();"],"sourceRoot":""}