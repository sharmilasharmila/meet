{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","props","state","showDetails","bool","this","setState","details","event","className","description","href","htmllink","onClick","handleShowHide","summary","start","location","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","count","handleInputChange","htmlFor","name","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9366f123.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { mockData } from './mock-data';\r\n\r\nclass Event extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            showDetails :false\r\n        }\r\n    }\r\n\r\n    handleShowHide(bool) {\r\n        this.setState({\r\n            showDetails: bool\r\n        });\r\n    }\r\n\r\n    render(){\r\n        //const {summary,location,description,link} = this.props.event;\r\n        //const date = this.props.event.date;\r\n        let details;\r\n        const event = this.props;\r\n\r\n        if(this.state.showDetails){\r\n            details = <div className=\"showhide\">\r\n                <h2>about event</h2>\r\n                <p className=\"description\">{event.description}</p>\r\n                <a className=\"link\" href={event.htmllink}>Show details from Calendar</a>\r\n                <button className=\"detailsButton\" onClick={()=>this.handleShowHide(false)}>Hide Details</button>\r\n            </div>\r\n        } else{\r\n            details = <button className=\"detailsButton\" onClick={()=>this.handleShowHide(true)}>Show Details</button>\r\n        }\r\n\r\n        return <div className=\"event\">\r\n            <p className=\"summary\">{event.summary}</p>\r\n            <p className=\"date\">{event.start}</p>\r\n            <p className=\"location\">{event.location}</p>\r\n            {details}\r\n        </div>\r\n    };\r\n};\r\n\r\nexport default Event;","import React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\n// import { mockData } from './mock-data';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    // const events = mockData;\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map(event => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default EventList;","import React,{Component} from 'react';\r\n\r\nclass CitySearch extends Component{\r\n    state ={\r\n        query : '',\r\n        suggestions:[]\r\n    }\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        const suggestions = this.props.locations.filter((location) => {\r\n          return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n        });\r\n        this.setState({\r\n          query: value,\r\n          suggestions,\r\n        });\r\n      };\r\n    \r\n      handleItemClicked = (suggestion) => {\r\n          this.setState({\r\n              query: suggestion\r\n          })\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"CitySearch\">\r\n                <input\r\n                    type = \"text\"\r\n                    className = \"city\"\r\n                    value={this.state.query}\r\n                    onChange={this.handleInputChanged}\r\n                />\r\n                <ul className=\"suggestions\">\r\n                    {this.state.suggestions.map((suggestion) => (\r\n                    <li key={suggestion} onClick={()=>this.handleItemClicked(suggestion)}>{suggestion}</li>\r\n                ))}\r\n                    <li key='all'>\r\n                    <b>See all cities</b>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySearch;","import React,{Component} from 'react';\r\n\r\nclass NumberOfEvents extends Component{\r\n    state = {\r\n        count :32\r\n    };\r\n\r\n    handleInputChange = (event)=>{\r\n        const count = event.target.value;\r\n        this.setState({\r\n            count\r\n        });\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"eventCounter\">\r\n                <lable htmlFor='eventCount'></lable>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"eventCount\"\r\n                    className=\"eventInputCount\"\r\n                    placeholder=\"Please Enter the Count\"\r\n                    value = {this.state.count}\r\n                    onChange = {this.handleInputChange} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents;","/* import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; */\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <CitySearch />\r\n        <NumberOfEvents />\r\n        <EventList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}